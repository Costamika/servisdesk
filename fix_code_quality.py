#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤ Django –ø—Ä–æ–µ–∫—Ç–µ ServisDesk.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é Black
3. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é isort
4. –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
5. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Bandit
"""

import os
import subprocess
import sys
from pathlib import Path


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"–í—ã–ø–æ–ª–Ω—è—é: {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print('='*60)
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )
        
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
        
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode})")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


def install_tools():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    tools = [
        "autoflake",
        "black",
        "isort",
        "bandit",
        "flake8",
        "pylint",
        "ruff"
    ]
    
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...")
    for tool in tools:
        run_command(f"pip install {tool}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {tool}")


def remove_unused_imports():
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    directories = ["tickets", "users", "servisdesk"]
    
    for directory in directories:
        if os.path.exists(directory):
            run_command(
                f"autoflake --in-place --remove-all-unused-imports --recursive {directory}/",
                f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {directory}/"
            )


def format_code():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é Black"""
    directories = ["tickets", "users", "servisdesk"]
    
    for directory in directories:
        if os.path.exists(directory):
            run_command(
                f"black {directory}/ --line-length=88",
                f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ {directory}/ —Å –ø–æ–º–æ—â—å—é Black"
            )


def sort_imports():
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é isort"""
    directories = ["tickets", "users", "servisdesk"]
    
    for directory in directories:
        if os.path.exists(directory):
            run_command(
                f"isort {directory}/",
                f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {directory}/ —Å –ø–æ–º–æ—â—å—é isort"
            )


def remove_trailing_whitespace():
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫"""
    directories = ["tickets", "users", "servisdesk"]
    
    for directory in directories:
        if os.path.exists(directory):
            run_command(
                f"find {directory}/ -name '*.py' -exec sed -i 's/[[:space:]]*$//' {{}} \\;",
                f"–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ {directory}/"
            )


def check_security():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞"""
    directories = ["tickets", "users", "servisdesk"]
    
    for directory in directories:
        if os.path.exists(directory):
            run_command(
                f"bandit -r {directory}/ -f json -o {directory}_bandit_report.json",
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ {directory}/ —Å –ø–æ–º–æ—â—å—é Bandit"
            )


def run_linters():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    print("\n" + "="*60)
    print("–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*60)
    
    # Flake8
    run_command(
        "flake8 tickets/ users/ servisdesk/ --exclude=venv,__pycache__,migrations,.git,product,logs --max-line-length=88 --count --statistics",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é Flake8"
    )
    
    # Pylint
    run_command(
        "pylint tickets/ users/ servisdesk/ --disable=C0114,C0115,C0116 --output-format=text",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é Pylint"
    )
    
    # Ruff (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    run_command(
        "ruff check tickets/ users/ servisdesk/",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é Ruff"
    )


def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
    import shutil
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup_before_fix_{timestamp}"
    
    print(f"\n–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ {backup_dir}/...")
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã
        for directory in ["tickets", "users", "servisdesk"]:
            if os.path.exists(directory):
                shutil.copytree(directory, f"{backup_dir}/{directory}")
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}/")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê DJANGO –ü–†–û–ï–ö–¢–ê SERVISDESK")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if not all(os.path.exists(d) for d in ["tickets", "users", "servisdesk"]):
        print("‚ùå –û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if not create_backup():
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (y/N): ")
        if response.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    install_tools()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\n" + "="*60)
    print("–í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*60)
    
    # 1. –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    remove_unused_imports()
    
    # 2. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    remove_trailing_whitespace()
    
    # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    sort_imports()
    
    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
    format_code()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    check_security()
    
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    run_linters()
    
    print("\n" + "="*60)
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*60)
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –ª–∏–Ω—Ç–µ—Ä–æ–≤ –≤—ã—à–µ")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("3. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ pre-commit hooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("5. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")


if __name__ == "__main__":
    main()
